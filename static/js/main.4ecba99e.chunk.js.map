{"version":3,"sources":["PathfinderView/Node/Node.jsx","algorithms/dijkstra.js","PathfinderView/PathfinderView.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","NUMBER_OF_ROWS","Math","floor","$","window","innerHeight","PathfindingView","state","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","mouseIsPressed","movingStartNode","movingFinishNode","pathFinding","algorithm","algorithmChoice","speed","speedChoice","getInitialGrid","setState","location","reload","newGrid","getNewGridWithWallToggled","getNewGridWithNewStart","getNewGridWithNewFinish","clearWalls","clearPath","wallsToClear","Array","prototype","slice","call","document","getElementsByClassName","i","j","visitedToClear","pathToClear","visualizeDijkstra","console","log","nodesInShortestPathOrder","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","setTimeout","animateShortestPath","getElementById","Container","fluid","onClick","refreshPage","disabled","clearBoard","Dropdown","Toggle","variant","Menu","Item","setDijkstra","visualizeAlgorithm","setSlowSpeed","setAverageSpeed","setFastSpeed","class","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","newNode","App","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ecba99e.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row\n    } = this.props;\n    const extraClassName = isFinish\n      ? 'node-finish'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : '';\n\n    return (\n      <td\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}\n      ></td>\n    );\n  }\n}\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React, { Component } from 'react';\nimport $ from 'jquery';\n\nimport Container from 'react-bootstrap/Container';\nimport Dropdown from 'react-bootstrap/Dropdown';\n\nimport Node from './Node/Node';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\n\nimport './PathfinderView.css';\n\nconst NUMBER_OF_ROWS = Math.floor($(window).innerHeight() * 0.77 / 25);\nconst NUMBER_OF_COLUMNS = 60;\n\nexport default class PathfindingView extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      START_NODE_ROW: Math.floor(NUMBER_OF_ROWS / 2),\n      START_NODE_COL: 15,\n      FINISH_NODE_ROW: Math.floor(NUMBER_OF_ROWS / 2),\n      FINISH_NODE_COL: 45,\n      mouseIsPressed: false,\n      movingStartNode: false,\n      movingFinishNode: false,\n      pathFinding: false,\n      algorithm: 1,\n      algorithmChoice: 'Dijkstra\\'s',\n      speed: 1,\n      speedChoice: 'Average'\n    };\n  }\n\n  componentDidMount() {\n    const grid = this.getInitialGrid();\n    this.setState({ grid });\n  }\n\n  refreshPage() {\n    window.location.reload();\n  }\n\n  handleMouseDown(row, col) {\n    const grid = this.state.grid;\n    const node = grid[row][col];\n    if (node.isStart) {\n      this.setState({movingStartNode: true});\n      return;\n    }\n    if (node.isFinish) {\n      this.setState({movingFinishNode: true});\n      return;\n    }\n    const newGrid = this.getNewGridWithWallToggled(grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row, col) {\n    if (this.state.movingStartNode) {\n      const newGrid = this.getNewGridWithNewStart(this.state.grid, row, col);\n      this.setState({ grid: newGrid, START_NODE_ROW: row, START_NODE_COL: col});\n    }\n    if (this.state.movingFinishNode) {\n      const newGrid = this.getNewGridWithNewFinish(this.state.grid, row, col);\n      this.setState({ grid: newGrid, FINISH_NODE_ROW: row, FINISH_NODE_COL: col });\n    }\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = this.getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false, movingStartNode: false, movingFinishNode: false });\n  }\n\n  setSlowSpeed() {\n    this.setState({ speed: 2, speedChoice: 'Slow'});\n  }\n\n  setAverageSpeed() {\n    this.setState({ speed: 1, speedChoice: 'Average'});\n  }\n\n  setFastSpeed() {\n    this.setState({ speed: 0.5, speedChoice: 'Fast'});\n  }\n\n  setDijkstra() {\n    this.setState({ algorithm: 1})\n  }\n\n  clearBoard() {\n    this.clearWalls();\n    this.clearPath();\n    const grid = this.getInitialGrid();\n    this.setState({ grid });\n  }\n\n  clearWalls() {\n    const wallsToClear = Array.prototype.slice.call(document.getElementsByClassName('node-wall'));\n    for (let i = 0; i < wallsToClear.length; i++) {\n      wallsToClear[i].className = 'node ';\n    }\n    const grid = this.state.grid;\n    for (let i = 0; i < NUMBER_OF_ROWS; i++) {\n      for (let j = 0; j < NUMBER_OF_COLUMNS; j++) {\n        const node = grid[i][j];\n        node.isWall = false;\n      }\n    }\n  }\n\n  clearPath() {\n    const visitedToClear = Array.prototype.slice.call(document.getElementsByClassName('node-visited'));\n    for (let i = 0; i < visitedToClear.length; i++) {\n      visitedToClear[i].className = 'node ';\n    }\n    const pathToClear = Array.prototype.slice.call(document.getElementsByClassName('node-shortest-path'));\n    for (let i = 0; i < pathToClear.length; i++) {\n      pathToClear[i].className = 'node ';\n    }\n    const grid = this.state.grid;\n    for (let i = 0; i < NUMBER_OF_ROWS; i++) {\n      for (let j = 0; j < NUMBER_OF_COLUMNS; j++) {\n        const node = grid[i][j];\n        node.distance = Infinity;\n        node.isVisited = false;\n        node.previousNode = null;\n      }\n    }\n  }\n\n  visualizeAlgorithm() {\n    this.clearPath();\n    const {algorithm} = this.state;\n\n    switch (algorithm) {\n      case(1) :\n        this.setState({pathFinding : true}, () => this.visualizeDijkstra());\n        break;\n      default :\n        this.setState({pathFinding : true}, () => this.visualizeDijkstra());\n        break;\n    }\n  }\n\n  visualizeDijkstra() {\n    const grid = this.state.grid;\n    const startNode = grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\n    const finishNode = grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    console.log(visitedNodesInOrder);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n    setTimeout(() => {\n      this.setState({pathFinding: false});\n    }, (visitedNodesInOrder.length * 10 + nodesInShortestPathOrder.length * 50) * this.state.speed);\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, this.state.speed * 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        if (!node.isStart && !node.isFinish)\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n      }, this.state.speed * 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        if (!node.isStart && !node.isFinish)\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-shortest-path';\n      }, this.state.speed * 50 * i);\n    }\n  }\n\n  render() {\n    const { grid, mouseIsPressed, pathFinding, algorithmChoice, speedChoice} = this.state;\n\n    return (\n      <div className='app-container'>\n\n        <Container fluid>\n          <div className=\"navbar\">\n\n            <button onClick={() => this.refreshPage()}>Pathfinding Visualizer</button>\n\n            <button disabled={pathFinding ? true : false} onClick={() => this.clearBoard()}>\n              Clear Board\n            </button>\n            <button disabled={pathFinding ? true : false} onClick={() => this.clearWalls()}>\n              Clear Walls\n            </button>\n            <button disabled={pathFinding ? true : false} onClick={() => this.clearPath()}>\n              Clear Path\n            </button>\n\n            <Dropdown>\n              <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                Algorithm: {algorithmChoice}\n              </Dropdown.Toggle>\n\n              <Dropdown.Menu>\n                <Dropdown.Item onClick={() => this.setDijkstra()}>Dijkstra's</Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n\n            <button disabled={pathFinding ? true : false} onClick={() => this.visualizeAlgorithm()}>\n              Visualize Algorithm\n            </button>\n\n            <Dropdown>\n              <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                Speed: {speedChoice}\n              </Dropdown.Toggle>\n\n              <Dropdown.Menu>\n                <Dropdown.Item onClick={() => this.setSlowSpeed()}>Slow</Dropdown.Item>\n                <Dropdown.Item onClick={() => this.setAverageSpeed()}>Average</Dropdown.Item>\n                <Dropdown.Item onClick={() => this.setFastSpeed()}>Fast</Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n\n          </div>\n        </Container>\n\n        <div id='mainText'>\n          <ul>\n            <li>\n              <div class=\"start\"></div>Start Node</li>\n            <li>\n              <div class=\"finish\"></div>Finish Node</li>\n            <li>\n              <div class=\"unvisited\"></div>Unvisited Nodes</li>\n            <li>\n              <div class=\"visited\"></div>Visited Nodes</li>\n            <li>\n              <div class=\"shortest-path\"></div>Shortest-path Node</li>\n            <li>\n              <div class=\"wall\"></div>Wall Node</li>\n          </ul>\n        </div>\n\n        <div className='table-container'>\n          <table className='table'>\n            {grid.map((row, rowIdx) => {\n              return (\n                <tr key={rowIdx}>\n                  {row.map((node, nodeIdx) => {\n                    const { row, col, isFinish, isStart, isWall } = node;\n                    return (\n                      <Node\n                        key={nodeIdx}\n                        col={col}\n                        isFinish={isFinish}\n                        isStart={isStart}\n                        isWall={isWall}\n                        mouseIsPressed={mouseIsPressed}\n                        onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                        onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\n                        onMouseUp={() => this.handleMouseUp()}\n                        row={row}\n                      ></Node>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </table>\n        </div>\n\n      </div>\n    );\n  }\n\n  getInitialGrid() {\n    const grid = [];\n    for (let row = 0; row < NUMBER_OF_ROWS; row++) {\n      const currentRow = [];\n      for (let col = 0; col < NUMBER_OF_COLUMNS; col++) {\n        currentRow.push(this.createNode(col, row));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  }\n  \n  createNode(col, row) {\n    return {\n      col,\n      row,\n      isStart: row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\n      isFinish: row === this.state.FINISH_NODE_ROW && col === this.state.FINISH_NODE_COL,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null\n    };\n  }\n  \n  getNewGridWithWallToggled(grid, row, col) {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n      ...node,\n      isWall: !node.isWall\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  }\n  \n  getNewGridWithNewStart(grid, row, col) {\n    const oldStart = grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\n    oldStart.isStart = false;\n\n    const newGrid = grid.slice();\n\n    const node = newGrid[row][col];\n    const newNode = {\n      ...node,\n      isStart: true\n    };\n    newGrid[row][col] = newNode;\n\n    return newGrid;\n  }\n  \n  getNewGridWithNewFinish(grid, row, col) {\n    const oldFinish = grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\n    oldFinish.isFinish = false;\n\n    const newGrid = grid.slice();\n\n    const node = newGrid[row][col];\n    const newNode = {\n      ...node,\n      isFinish: true\n    };\n    newGrid[row][col] = newNode;\n\n    return newGrid;\n  }\n\n}","import React from 'react';\nimport PathfinderView from './PathfinderView/PathfinderView';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <PathfinderView></PathfinderView>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}