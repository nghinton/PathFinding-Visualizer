{"version":3,"sources":["PathfinderView/Node/Node.jsx","algorithms/astar.js","algorithms/greedyBest.js","algorithms/depthFirst.js","algorithms/breadthFirst.js","algorithms/primMaze.js","algorithms/recursiveMaze.js","PathfinderView/PathfinderView.jsx","algorithms/randomMaze.js","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","sortNodesByDistance","nodesToVisit","sort","nodeA","nodeB","distance","updateUnvisitedNeighbors","unvisitedNeighbors","node","startNode","finishNode","neighbor","distanceToFinish","Math","abs","distanceToStart","previousNode","getUnvisitedNeighbors","grid","neighbors","push","length","filter","isVisited","breadthFirst","visitedNodesInOrder","unvisitedNodes","nodes","getAllNodes","closestNode","shift","Infinity","getNeighbors","recursiveMaze","NUMBER_OF_ROWS","NUMBER_OF_COLUMNS","wallsToAnimate","i","recursiveMazeHelper","x","y","width","height","console","log","getOrientation","randomCol","round","random","randomBreak","randomRow","floor","$","window","innerHeight","PathfindingView","state","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","mouseIsPressed","movingStartNode","movingFinishNode","pathFinding","algorithm","algorithmChoice","speed","speedChoice","mazeText","getInitialGrid","setState","location","reload","newGrid","getNewGridWithWallToggled","getNewGridWithNewStart","getNewGridWithNewFinish","clearWalls","clearPath","wallsToClear","Array","prototype","slice","call","document","getElementsByClassName","j","visitedToClear","pathToClear","randomMaze","setTimeout","getElementById","startNeighbors","rand","splice","exploredNeighbors","primMaze","visualizeAstar","visualizeGreedyBest","visualizeDepthFirst","visualizeBreadthFirst","astar","nodesInShortestPathOrder","getNodesInShortestPathOrder","animateAlgorithm","greedyBest","pop","depthFirst","currentNode","unshift","animateShortestPath","Container","fluid","onClick","refreshPage","disabled","clearBoard","Dropdown","Toggle","variant","Menu","Item","setAstar","setGreedyBest","setDepthFirst","setBreadthFirst","visualizeAlgorithm","setSlowSpeed","setAverageSpeed","setFastSpeed","mazeRandom","mazePrims","mazeRecursive","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","newNode","App","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cbe9c000.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row\n    } = this.props;\n    const extraClassName = isFinish\n      ? 'node-finish'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : '';\n\n    return (\n      <td\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}\n      ></td>\n    );\n  }\n}\n","\n\nexport function astar(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  const nodesToVisit = [startNode];\n\n  while (!!nodesToVisit.length) {\n\n    // Sort the nodes by distance\n    sortNodesByDistance(nodesToVisit);\n\n    console.log(visitedNodesInOrder);\n\n    // Pop off the clostest node\n    const closestNode = nodesToVisit.shift();\n\n    // Finish up if the closestNode is the finish node\n    if (closestNode === finishNode) return visitedNodesInOrder;\n\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n\n    // If the node is already visited skip it\n    if (closestNode.isVisited) continue;\n\n    // Otherwise mark it as visited and push it to the returned array\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    \n    // Get the neighbors and calculate their distance\n    const unvisitedNeighbors = getUnvisitedNeighbors(closestNode, grid);\n    updateUnvisitedNeighbors(unvisitedNeighbors, closestNode, startNode, finishNode);\n\n    // Then add those neighbors to nodesToVisit\n    for (let i = 0; i < unvisitedNeighbors.length; i++) {\n      nodesToVisit.push(unvisitedNeighbors[i]);\n    }\n\n  }\n\n  // return if the loops ends and the finished node was not reached (failure)\n  return visitedNodesInOrder;\n}\n\nfunction sortNodesByDistance(nodesToVisit) {\n  nodesToVisit.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(unvisitedNeighbors, node, startNode, finishNode) {\n  for (const neighbor of unvisitedNeighbors) {\n    // Distance will be used as a psuedo score, calculated\n    // based on minimizing the distance from both the start node \n    // and finish node\n    const distanceToFinish = Math.abs(neighbor.row - finishNode.row) + Math.abs(neighbor.col - finishNode.col);\n    const distanceToStart = Math.abs(neighbor.row - startNode.row) + Math.abs(neighbor.col - startNode.col);\n    neighbor.distance = distanceToFinish + distanceToStart;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n","\r\n\r\nexport function greedyBest(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  const nodesToVisit = [startNode];\r\n\r\n  while (!!nodesToVisit.length) {\r\n\r\n    // Sort the nodes by distance\r\n    sortNodesByDistance(nodesToVisit);\r\n\r\n    console.log(visitedNodesInOrder);\r\n\r\n    // Pop off the clostest node\r\n    const closestNode = nodesToVisit.shift();\r\n\r\n    // Finish up if the closestNode is the finish node\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n\r\n    // If the node is already visited skip it\r\n    if (closestNode.isVisited) continue;\r\n\r\n    // Otherwise mark it as visited and push it to the returned array\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    \r\n    // Get the neighbors and calculate their distance\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(closestNode, grid);\r\n    updateUnvisitedNeighbors(unvisitedNeighbors, closestNode, finishNode);\r\n\r\n    // Then add those neighbors to nodesToVisit\r\n    for (let i = 0; i < unvisitedNeighbors.length; i++) {\r\n      nodesToVisit.push(unvisitedNeighbors[i]);\r\n    }\r\n  \r\n  }\r\n  \r\n  // return if the loops ends and the finished node was not reached (failure)\r\n  return visitedNodesInOrder;\r\n}\r\n  \r\n  function sortNodesByDistance(nodesToVisit) {\r\n    nodesToVisit.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n  }\r\n  \r\n  function updateUnvisitedNeighbors(unvisitedNeighbors, node, finishNode) {\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      // distance calculated as distance from the finish node\r\n      neighbor.distance = Math.abs(neighbor.row - finishNode.row) + Math.abs(neighbor.col - finishNode.col);\r\n      neighbor.previousNode = node;\r\n    }\r\n  }\r\n  \r\n  function getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const { col, row } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n  }\r\n  ","\r\n\r\nexport function depthFirst(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  const nodesToVisit = [startNode];\r\n  \r\n  while (!!nodesToVisit.length) {\r\n    // Pop the next node to be checked off the array\r\n    const node = nodesToVisit.pop();\r\n\r\n    // Is it a wall?\r\n    if(node.isWall) continue;\r\n\r\n    // Have we visited it before?\r\n    if (node.isVisited) continue;\r\n\r\n    // Mark the node and push it to the final array otherwise\r\n    node.isVisited = true;\r\n    visitedNodesInOrder.push(node);\r\n\r\n    // Check and see if we are done\r\n    if (node === finishNode) return visitedNodesInOrder;\r\n\r\n    // If not update the nodesToVisit array with the neighbors\r\n    const neighbors = getUnvisitedNeighbors(node, grid);\r\n    for (let i = 0; i < neighbors.length; i++) {\r\n      neighbors[i].previousNode = node;\r\n      nodesToVisit.push(neighbors[i]);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);                      // LEFT\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);        // DOWN\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);     // RIGHT\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);                      // UP\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n","\r\n\r\nexport function breadthFirst(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    // Sort by distance then grab the closest node\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // Check for walls or being trapped\r\n    if (closestNode.isWall) continue;\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    // If not the mark the node and push it to the final array \r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    // Check and see if we are done\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    // If not update the unvisited neighbors\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n  \r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}","export function primMaze(grid, NUMBER_OF_ROWS, NUMBER_OF_COLUMNS) {\r\n\r\n    const wallsToAnimate = [];\r\n\r\n    // Start with a grid of filled cells\r\n    for (let i = 0; i < NUMBER_OF_ROWS; ++i) {\r\n        for (let j = 0; j < NUMBER_OF_COLUMNS; ++j) {\r\n            const node = grid[i][j];\r\n            node.isWall = true;\r\n        }\r\n    }\r\n\r\n    // Start of maze\r\n    const startNode = grid[1][1];\r\n    startNode.isWall = false;\r\n\r\n    // Get its neighbors\r\n    const startNeighbors = getNeighbors(startNode, grid);\r\n\r\n    // Add the neighbors to the list\r\n    const nodesToVisit = [];\r\n    for (let i = 0; i < startNeighbors.length; ++i) {\r\n        nodesToVisit.push(startNeighbors[i]);\r\n    }\r\n\r\n    while (!!nodesToVisit.length) {\r\n\r\n        console.log(nodesToVisit);\r\n\r\n        // Splice a random node off  the list\r\n        const rand = Math.floor(Math.random()*nodesToVisit.length);\r\n        const node = nodesToVisit[rand];\r\n        nodesToVisit.splice(rand, 1);\r\n\r\n        // Get the node's neighbors\r\n        const neighbors = getNeighbors(node, grid);\r\n\r\n        // Check if it has 2 unexplored neighbors\r\n        const exploredNeighbors = neighbors.filter(neighbor => neighbor.isWall);\r\n        if (exploredNeighbors.length > 2) {\r\n            // If it doesnt clear the cell and add the neighbors to the list\r\n            node.isWall = false;\r\n            for (let i = 0; i < exploredNeighbors.length; ++i) {\r\n                nodesToVisit.push(exploredNeighbors[i]);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // Run over the grid and grab everything thats still a wall\r\n    for (let i = 0; i < NUMBER_OF_ROWS; ++i) {\r\n        for (let j = 0; j < NUMBER_OF_COLUMNS; ++j) {\r\n            const node = grid[i][j];\r\n            if (node.isWall) {\r\n                wallsToAnimate.push(node);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Return the walls of the grid\r\n    return wallsToAnimate;\r\n}\r\n\r\nfunction getNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const { col, row } = node;\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);                      // LEFT\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);        // DOWN\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);     // RIGHT\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);                      // UP\r\n    return neighbors;\r\n  }","export function recursiveMaze(grid, NUMBER_OF_ROWS, NUMBER_OF_COLUMNS) {\r\n\r\n    const wallsToAnimate = [];\r\n\r\n    // Start by grabbing the outer walls of the table\r\n    for (let i = 0; i < NUMBER_OF_ROWS; ++i) {\r\n        wallsToAnimate.push(grid[i][0]);\r\n    }\r\n    for (let i = 0; i < NUMBER_OF_COLUMNS; ++i) {\r\n        wallsToAnimate.push(grid[0][i]);\r\n    }\r\n    for (let i = 0; i < NUMBER_OF_ROWS; ++i) {\r\n        wallsToAnimate.push(grid[i][NUMBER_OF_COLUMNS - 1]);\r\n    }\r\n    for (let i = 0; i < NUMBER_OF_COLUMNS; ++i) {\r\n        wallsToAnimate.push(grid[NUMBER_OF_ROWS - 1][i]);\r\n    }\r\n\r\n    // Get the walls to animate by calling the recursive function\r\n    recursiveMazeHelper(grid, 1, 1, NUMBER_OF_ROWS - 2, NUMBER_OF_COLUMNS - 2, wallsToAnimate);\r\n\r\n    return wallsToAnimate;\r\n}\r\n\r\nfunction recursiveMazeHelper(grid, x, y, width, height, wallsToAnimate) {\r\n\r\n    // log for debugging purposes\r\n    console.log(wallsToAnimate);\r\n\r\n    // Check base case\r\n    if (width < 5 || height < 5) return;\r\n\r\n    // Get the orientation of the subfield\r\n    const orientation = getOrientation(width, height);\r\n\r\n    // Decide which way to split the subfield based on orientation\r\n    if (orientation) {\r\n        // Select a random col to split and a random break in that col\r\n        const randomCol = Math.round(Math.random() * (height-2)) + 1;\r\n        const randomBreak = Math.round(Math.random() * width);\r\n        // Push the cells to wallToAnimate\r\n        for (let i = 0; i < width; i++) {\r\n            if (i !== randomBreak) wallsToAnimate.push(grid[x + i][y + randomCol]);\r\n        }\r\n        // Call the helper function on both sides of the random col\r\n        recursiveMazeHelper(grid, x, y, width, randomCol, wallsToAnimate);\r\n        recursiveMazeHelper(grid, x, y + randomCol + 1, width, height - randomCol - 1, wallsToAnimate);\r\n    }\r\n    \r\n    else {\r\n        // Select a random row to split and a random break in that row\r\n        const randomRow = Math.round(Math.random() * (width-2)) + 1;\r\n        const randomBreak = Math.round(Math.random() * height);\r\n        // Push the cells to wallToAnimate\r\n        for (let i = 0; i < height; i++) {\r\n            if (i !== randomBreak) wallsToAnimate.push(grid[x + randomRow][y + i]);\r\n        }\r\n        // Call the helper function on both sides of the random row\r\n        recursiveMazeHelper(grid, x, y, randomRow, height, wallsToAnimate);\r\n        recursiveMazeHelper(grid, x + randomRow + 1, y, width - randomRow - 1, height, wallsToAnimate);\r\n    }\r\n    \r\n\r\n}\r\n\r\nfunction getOrientation(width, height) {\r\n    if (width < height) {\r\n        return true;\r\n    }\r\n    return false;\r\n}","import React, { Component } from 'react';\nimport $ from 'jquery';\n\nimport Container from 'react-bootstrap/Container';\nimport Dropdown from 'react-bootstrap/Dropdown';\n\nimport Node from './Node/Node';\nimport { astar } from '../algorithms/astar';\nimport { greedyBest } from '../algorithms/greedyBest';\nimport { depthFirst } from '../algorithms/depthFirst';\nimport { breadthFirst } from '../algorithms/breadthFirst';\nimport { randomMaze } from '../algorithms/randomMaze';\nimport { primMaze } from '../algorithms/primMaze';\nimport { recursiveMaze } from '../algorithms/recursiveMaze';\n\nimport './PathfinderView.css';\n\n\nconst NUMBER_OF_ROWS = Math.floor($(window).innerHeight() * 0.77 / 25);\nconst NUMBER_OF_COLUMNS = 60;\n\nexport default class PathfindingView extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      START_NODE_ROW: Math.floor(NUMBER_OF_ROWS / 2),\n      START_NODE_COL: 15,\n      FINISH_NODE_ROW: Math.floor(NUMBER_OF_ROWS / 2),\n      FINISH_NODE_COL: 45,\n      mouseIsPressed: false,\n      movingStartNode: false,\n      movingFinishNode: false,\n      pathFinding: false,\n      algorithm: 1,\n      algorithmChoice: 'A* Search',\n      speed: 1,\n      speedChoice: 'Average',\n      mazeText: 'Create Maze'\n    };\n  }\n\n  componentDidMount() {\n    const grid = this.getInitialGrid();\n    this.setState({ grid });\n  }\n\n  refreshPage() {\n    window.location.reload();\n  }\n\n  handleMouseDown(row, col) {\n    const grid = this.state.grid;\n    const node = grid[row][col];\n    if (node.isStart) {\n      this.setState({movingStartNode: true});\n      return;\n    }\n    if (node.isFinish) {\n      this.setState({movingFinishNode: true});\n      return;\n    }\n    const newGrid = this.getNewGridWithWallToggled(grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row, col) {\n    if (this.state.movingStartNode) {\n      const newGrid = this.getNewGridWithNewStart(this.state.grid, row, col);\n      this.setState({ grid: newGrid, START_NODE_ROW: row, START_NODE_COL: col});\n    }\n    if (this.state.movingFinishNode) {\n      const newGrid = this.getNewGridWithNewFinish(this.state.grid, row, col);\n      this.setState({ grid: newGrid, FINISH_NODE_ROW: row, FINISH_NODE_COL: col });\n    }\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = this.getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false, movingStartNode: false, movingFinishNode: false });\n  }\n\n  setSlowSpeed() {\n    this.setState({ speed: 2, speedChoice: 'Slow'});\n  }\n\n  setAverageSpeed() {\n    this.setState({ speed: 1, speedChoice: 'Average'});\n  }\n\n  setFastSpeed() {\n    this.setState({ speed: 0.5, speedChoice: 'Fast'});\n  }\n\n  setAstar() {\n    this.setState({ algorithm: 1, algorithmChoice: 'A* Search'});\n  }\n\n  setGreedyBest() {\n    this.setState({ algorithm: 2, algorithmChoice: 'Greedy Best First'});\n  }\n\n  setDepthFirst() {\n    this.setState({ algorithm: 3, algorithmChoice: 'Depth First'});\n  }\n\n  setBreadthFirst() {\n    this.setState({ algorithm: 4, algorithmChoice: 'Breadth First'});\n  }\n\n  clearBoard() {\n    this.clearWalls();\n    this.clearPath();\n    const grid = this.getInitialGrid();\n    this.setState({ grid });\n  }\n\n  clearWalls() {\n    const wallsToClear = Array.prototype.slice.call(document.getElementsByClassName('node-wall'));\n    for (let i = 0; i < wallsToClear.length; i++) {\n      wallsToClear[i].className = 'node ';\n    }\n    const grid = this.state.grid;\n    for (let i = 0; i < NUMBER_OF_ROWS; i++) {\n      for (let j = 0; j < NUMBER_OF_COLUMNS; j++) {\n        const node = grid[i][j];\n        node.isWall = false;\n      }\n    }\n  }\n\n  clearPath() {\n    const visitedToClear = Array.prototype.slice.call(document.getElementsByClassName('node-visited'));\n    for (let i = 0; i < visitedToClear.length; i++) {\n      visitedToClear[i].className = 'node ';\n    }\n    const pathToClear = Array.prototype.slice.call(document.getElementsByClassName('node-shortest-path'));\n    for (let i = 0; i < pathToClear.length; i++) {\n      pathToClear[i].className = 'node ';\n    }\n    const grid = this.state.grid;\n    for (let i = 0; i < NUMBER_OF_ROWS; i++) {\n      for (let j = 0; j < NUMBER_OF_COLUMNS; j++) {\n        const node = grid[i][j];\n        node.distance = Infinity;\n        node.isVisited = false;\n        node.previousNode = null;\n      }\n    }\n  }\n\n  mazeRandom() {\n    this.setState({ mazeText: 'Random Maze' })\n    this.clearWalls();\n    const grid = this.state.grid;\n\n    const startNode = grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\n    const finishNode = grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\n\n    const wallsToAnimate = randomMaze(grid, NUMBER_OF_ROWS, NUMBER_OF_COLUMNS);\n\n    for (let i = 0; i < wallsToAnimate.length; i++) {\n      const node = wallsToAnimate[i];\n      if (node === startNode || node === finishNode) {\n        node.isWall = false; \n        continue;\n      }\n      node.isWall = true;\n      setTimeout(() => {\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-wall';\n      }, i * this.state.speed);\n    }\n\n  }\n\n  mazePrims() {\n    this.setState({ mazeText: 'Prim\\'s Maze' })\n    this.clearWalls();\n    const grid = this.state.grid;\n\n    const startNode = grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\n    const finishNode = grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\n\n    const wallsToAnimate = primMaze(grid, NUMBER_OF_ROWS, NUMBER_OF_COLUMNS);\n    \n    for (let i = 0; i < wallsToAnimate.length; i++) {\n      const node = wallsToAnimate[i];\n      if (node === startNode || node === finishNode) {\n        node.isWall = false; \n        continue;\n      }\n      node.isWall = true;\n      setTimeout(() => {\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-wall';\n      }, i * this.state.speed);\n    }\n\n  }\n\n  mazeRecursive() {\n    this.setState({ mazeText: 'Recursive Division Maze' })\n    this.clearWalls();\n    const grid = this.state.grid;\n\n    const startNode = grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\n    const finishNode = grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\n\n    const wallsToAnimate = recursiveMaze(grid, NUMBER_OF_ROWS, NUMBER_OF_COLUMNS);\n    \n    for (let i = 0; i < wallsToAnimate.length; i++) {\n      const node = wallsToAnimate[i];\n      if (node === startNode || node === finishNode) {\n        node.isWall = false; \n        continue;\n      }\n      node.isWall = true;\n      setTimeout(() => {\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-wall';\n      }, i * this.state.speed);\n    }\n\n  }\n\n  visualizeAlgorithm() {\n    this.clearPath();\n    const {algorithm} = this.state;\n\n    switch (algorithm) {\n      case(1) :\n        this.setState({pathFinding : true}, () => this.visualizeAstar());\n        break;\n      case(2) :\n        this.setState({pathFinding : true}, () => this.visualizeGreedyBest());\n        break;\n      case(3) :\n        this.setState({pathFinding : true}, () => this.visualizeDepthFirst());\n        break;\n      case(4) :\n        this.setState({pathFinding : true}, () => this.visualizeBreadthFirst());\n        break;\n      default :\n        this.setState({pathFinding : true}, () => this.visualizeAstar());\n        break;\n    }\n  }\n\n  visualizeAstar() {\n    const grid = this.state.grid;\n    const startNode = grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\n    const finishNode = grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\n    const visitedNodesInOrder = astar(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = this.getNodesInShortestPathOrder(finishNode);\n    \n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n\n    setTimeout(() => {\n      this.setState({pathFinding: false});\n    }, (visitedNodesInOrder.length * 10 + nodesInShortestPathOrder.length * 50) * this.state.speed);\n  }\n\n  visualizeGreedyBest() {\n    const grid = this.state.grid;\n    const startNode = grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\n    const finishNode = grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\n    const visitedNodesInOrder = greedyBest(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = this.getNodesInShortestPathOrder(finishNode);\n    \n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n\n    setTimeout(() => {\n      this.setState({pathFinding: false});\n    }, (visitedNodesInOrder.length * 10 + nodesInShortestPathOrder.length * 50) * this.state.speed);\n  }\n  \n  visualizeDepthFirst() {\n    const grid = this.state.grid;\n    const startNode = grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\n    const finishNode = grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\n    const visitedNodesInOrder = depthFirst(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = this.getNodesInShortestPathOrder(finishNode);\n    \n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    \n    setTimeout(() => {\n      this.setState({pathFinding: false});\n    }, (visitedNodesInOrder.length * 10 + nodesInShortestPathOrder.length * 50) * this.state.speed);\n  }\n\n  visualizeBreadthFirst() {\n    const grid = this.state.grid;\n    const startNode = grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\n    const finishNode = grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\n    const visitedNodesInOrder = breadthFirst(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = this.getNodesInShortestPathOrder(finishNode);\n\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    \n    setTimeout(() => {\n      this.setState({pathFinding: false});\n    }, (visitedNodesInOrder.length * 10 + nodesInShortestPathOrder.length * 50) * this.state.speed);\n  }\n\n  getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n  }\n\n  animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, this.state.speed * 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        if (!node.isStart && !node.isFinish)\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n      }, this.state.speed * 10 * i);\n    }\n  }\n \n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        if (!node.isStart && !node.isFinish)\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-shortest-path';\n      }, this.state.speed * 50 * i);\n    }\n  }\n\n  render() {\n    const { grid, mouseIsPressed, pathFinding, algorithmChoice, speedChoice, mazeText} = this.state;\n\n    return (\n      <div className='app-container'>\n\n        <Container fluid>\n          <div className=\"navbar\">\n\n            <button onClick={() => this.refreshPage()}>Pathfinding Visualizer</button>\n\n            <button disabled={pathFinding ? true : false} onClick={() => this.clearBoard()}>\n              Clear Board\n            </button>\n            <button disabled={pathFinding ? true : false} onClick={() => this.clearWalls()}>\n              Clear Walls\n            </button>\n            <button disabled={pathFinding ? true : false} onClick={() => this.clearPath()}>\n              Clear Path\n            </button>\n\n            <Dropdown>\n              <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                Algorithm: {algorithmChoice}\n              </Dropdown.Toggle>\n\n              <Dropdown.Menu>\n                <Dropdown.Item onClick={() => this.setAstar()}>A* Search</Dropdown.Item>\n                <Dropdown.Item onClick={() => this.setGreedyBest()}>Greedy Best First</Dropdown.Item>\n                <Dropdown.Item onClick={() => this.setDepthFirst()}>Depth First</Dropdown.Item>\n                <Dropdown.Item onClick={() => this.setBreadthFirst()}>Breadth First</Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n\n            <button disabled={pathFinding ? true : false} onClick={() => this.visualizeAlgorithm()}>\n              Visualize Algorithm\n            </button>\n\n            <Dropdown>\n              <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                Speed: {speedChoice}\n              </Dropdown.Toggle>\n\n              <Dropdown.Menu>\n                <Dropdown.Item onClick={() => this.setSlowSpeed()}>Slow</Dropdown.Item>\n                <Dropdown.Item onClick={() => this.setAverageSpeed()}>Average</Dropdown.Item>\n                <Dropdown.Item onClick={() => this.setFastSpeed()}>Fast</Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n\n            <Dropdown>\n              <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                {mazeText}\n              </Dropdown.Toggle>\n\n              <Dropdown.Menu>\n                <Dropdown.Item onClick={() => this.mazeRandom()}>Random Maze</Dropdown.Item>\n                <Dropdown.Item onClick={() => this.mazePrims()}>Prim's Maze</Dropdown.Item>\n                <Dropdown.Item onClick={() => this.mazeRecursive()}>Recursive Division Maze</Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n\n          </div>\n        </Container>\n\n        <div id='mainText'>\n          <ul>\n            <li>\n              <div className=\"start\"></div>Start Node</li>\n            <li>\n              <div className=\"finish\"></div>Finish Node</li>\n            <li>\n              <div className=\"unvisited\"></div>Unvisited Nodes</li>\n            <li>\n              <div className=\"visited\"></div>Visited Nodes</li>\n            <li>\n              <div className=\"shortest-path\"></div>Shortest-path Node</li>\n            <li>\n              <div className=\"wall\"></div>Wall Node</li>\n          </ul>\n        </div>\n\n        <div className='table-container'>\n          <table id='grid' className='table'>\n          <tbody>\n            {grid.map((row, rowIdx) => {\n              return (\n                <tr key={rowIdx}>\n                  {row.map((node, nodeIdx) => {\n                    const { row, col, isFinish, isStart, isWall } = node;\n                    return (\n                      <Node\n                        key={nodeIdx}\n                        col={col}\n                        isFinish={isFinish}\n                        isStart={isStart}\n                        isWall={isWall}\n                        mouseIsPressed={mouseIsPressed}\n                        onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                        onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\n                        onMouseUp={() => this.handleMouseUp()}\n                        row={row}\n                      ></Node>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n          </table>\n        </div>\n\n      </div>\n    );\n  }\n\n  getInitialGrid() {\n    const grid = [];\n    for (let row = 0; row < NUMBER_OF_ROWS; row++) {\n      const currentRow = [];\n      for (let col = 0; col < NUMBER_OF_COLUMNS; col++) {\n        currentRow.push(this.createNode(col, row));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  }\n  \n  createNode(col, row) {\n    return {\n      col,\n      row,\n      isStart: row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\n      isFinish: row === this.state.FINISH_NODE_ROW && col === this.state.FINISH_NODE_COL,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null\n    };\n  }\n  \n  getNewGridWithWallToggled(grid, row, col) {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n      ...node,\n      isWall: !node.isWall\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  }\n  \n  getNewGridWithNewStart(grid, row, col) {\n    const oldStart = grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\n    oldStart.isStart = false;\n\n    const newGrid = grid.slice();\n\n    const node = newGrid[row][col];\n    const newNode = {\n      ...node,\n      isStart: true\n    };\n    newGrid[row][col] = newNode;\n\n    return newGrid;\n  }\n  \n  getNewGridWithNewFinish(grid, row, col) {\n    const oldFinish = grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\n    oldFinish.isFinish = false;\n\n    const newGrid = grid.slice();\n\n    const node = newGrid[row][col];\n    const newNode = {\n      ...node,\n      isFinish: true\n    };\n    newGrid[row][col] = newNode;\n\n    return newGrid;\n  }\n\n}","\r\n\r\nexport function randomMaze(grid, NUMBER_OF_ROWS, NUMBER_OF_COLUMNS) {\r\n\r\n  const wallsToAnimate = [];\r\n\r\n  // Run over the grid and give every cell a 1/4 chance of being a wall\r\n  for (let i = 0; i < NUMBER_OF_ROWS; i++) {\r\n    for (let j = 0; j < NUMBER_OF_COLUMNS; j++) {\r\n      if (Math.random() < 0.25) {\r\n        const node = grid[i][j];\r\n        wallsToAnimate.push(node);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Return walls of the grid\r\n  return wallsToAnimate;\r\n}","import React from 'react';\nimport PathfinderView from './PathfinderView/PathfinderView';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <PathfinderView></PathfinderView>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}